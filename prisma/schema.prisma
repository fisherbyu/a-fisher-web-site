// Prisma Schema Definition
// Connection Configurations
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Table Definitions
model Artist {
    id   Int    @id @default(autoincrement())
    name String
    tier Int
    rank Int?

    // Relations
    image      Image?      @relation("ArtistImage")
    link       Link?       @relation("ArtistLink")
    attributes Attribute[] @relation("ArtistAttributes")
    contents   Content[]   @relation("ArtistContents")
}

model Album {
    id   Int    @id @default(autoincrement())
    name String
    rank Int

    // Relations
    image      Image?      @relation("AlbumImage")
    link       Link?       @relation("AlbumLink")
    attributes Attribute[] @relation("AlbumAttributes")
    contents   Content[]   @relation("AlbumContents")
}

model Playlist {
    id    Int    @id @default(autoincrement())
    title String

    // Relations
    link Link? @relation("PlaylistLink")
}

model Link {
    id         Int    @id @default(autoincrement())
    appleURI   String
    spotifyURI String

    // Relations
    artist     Artist?   @relation("ArtistLink", fields: [artistId], references: [id])
    artistId   Int?      @unique
    album      Album?    @relation("AlbumLink", fields: [albumId], references: [id])
    albumId    Int?      @unique
    playlist   Playlist? @relation("PlaylistLink", fields: [playlistId], references: [id])
    playlistId Int?      @unique

    // Unique Contraints for Mutual Exclusivity
    @@unique([artistId, id], name: "artist_link")
    @@unique([albumId, id], name: "album_link")
    @@unique([playlistId, id], name: "playlist_link")
}

model Image {
    id     Int    @id @default(autoincrement())
    src    String
    alt    String
    height Int
    width  Int

    // Relations
    artist   Artist? @relation("ArtistImage", fields: [artistId], references: [id])
    artistId Int?    @unique
    album    Album?  @relation("AlbumImage", fields: [albumId], references: [id])
    albumId  Int?    @unique

    // Unique Contraints for Mutual Exclusivity
    @@unique([artistId, id], name: "artist_image")
    @@unique([albumId, id], name: "album_image")
}

model Content {
    id    Int    @id @default(autoincrement())
    order Int
    text  String

    // Relations
    artist   Artist? @relation("ArtistContents", fields: [artistId], references: [id])
    artistId Int?
    album    Album?  @relation("AlbumContents", fields: [albumId], references: [id])
    albumId  Int?

    // Unique Contraints for Mutual Exclusivity
    @@unique([artistId, order], name: "artist_content_order")
    @@unique([albumId, order], name: "album_content_order")
}

model Attribute {
    id    Int    @id @default(autoincrement())
    order Int
    title String
    text  String

    // Relations
    artist   Artist? @relation("ArtistAttributes", fields: [artistId], references: [id])
    artistId Int?
    album    Album?  @relation("AlbumAttributes", fields: [albumId], references: [id])
    albumId  Int?

    // Unique Contraints for Mutual Exclusivity
    @@unique([artistId, order], name: "artist_attribute_order")
    @@unique([albumId, order], name: "album_attribute_order")
}
