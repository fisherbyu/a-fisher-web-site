// Prisma Schema Definition
// Connection Configurations
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Table Definitions
model Artist {
    id      String    @id @default(uuid())
    tier    Int
    rank    Int?
    name    String
    content Content[]
    tags    Tag[]
    link    MusicLink @relation(fields: [linkId], references: [id])
    linkId  String    @unique
    image   Image     @relation(fields: [imageId], references: [id])
    imageId String    @unique

    @@map("artists")
}

model Album {
    id      String    @id @default(uuid())
    rank    Int
    name    String
    content Content[]
    tags    Tag[]
    link    MusicLink @relation(fields: [linkId], references: [id])
    linkId  String    @unique
    image   Image     @relation(fields: [imageId], references: [id])
    imageId String    @unique

    @@map("albums")
}

model Content {
    id       String  @id @default(uuid())
    order    Int
    text     String
    artist   Artist? @relation(fields: [artistId], references: [id])
    artistId String?
    album    Album?  @relation(fields: [albumId], references: [id])
    albumId  String?

    @@map("contents")
}

model Tag {
    id       String  @id @default(uuid())
    title    String
    content  String
    order    Int
    artist   Artist? @relation(fields: [artistId], references: [id])
    artistId String?
    album    Album?  @relation(fields: [albumId], references: [id])
    albumId  String?

    @@map("tags")
}

model MusicLink {
    id         String  @id @default(uuid())
    appleURI   String
    spotifyURI String
    artist     Artist?
    album      Album?

    @@map("music_links")
}

model Image {
    id     String  @id @default(uuid())
    src    String
    alt    String
    artist Artist?
    album  Album?

    @@map("images")
}
